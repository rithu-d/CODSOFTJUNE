import tkinter as tk

class CoolCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculator")
        self.root.geometry("320x450")
        self.root.configure(bg="#0D0D0D")  # Dark theme background

        self.expression = ""
        self.new_calc = False

        # Gradient BG Effect
        self.bg_frame = tk.Canvas(root, width=320, height=450, highlightthickness=0)
        self.bg_frame.create_rectangle(0, 0, 320, 450, fill="#232526", outline="")
        self.bg_frame.create_rectangle(0, 0, 320, 450, fill="#414345", outline="", stipple="gray50")
        self.bg_frame.place(x=0, y=0)

        # Entry Field (Expression Display)
        self.entry = tk.Entry(root, font=("Orbitron", 26, "bold"), bg="#1F1F1F", fg="cyan", 
                              bd=0, justify="right", insertbackground="white")
        self.entry.pack(fill="both", padx=15, pady=15, ipady=15)
        self.entry.insert(0, "0")

        # Button Layout
        buttons = [
            ('7', '8', '9', '/'),
            ('4', '5', '6', '*'),
            ('1', '2', '3', '-'),
            ('C', '0', '=', '+'),
            ('⌫',)  # Backspace Button
        ]

        # Creating Buttons
        frame = tk.Frame(root, bg="#0D0D0D")
        frame.pack()

        for row in buttons:
            row_frame = tk.Frame(frame, bg="#0D0D0D")
            row_frame.pack(side="top", fill="x")
            for btn in row:
                action = lambda x=btn: self.handle_input(x)
                tk.Button(row_frame, text=btn, command=action, font=("Orbitron", 18, "bold"), fg="white",
                          bg="#333", width=5, height=2, bd=0, relief="ridge", activebackground="#555").pack(
                    side="left", expand=True, fill="both", padx=5, pady=5)

    def handle_input(self, value):
        if value == "C":
            self.expression = ""
        elif value == "⌫":
            self.expression = self.expression[:-1]  # Delete last character
        elif value == "=":
            try:
                self.expression = str(eval(self.expression))
                self.new_calc = True  # Marks that a result is displayed
            except:
                self.expression = "Error"
        else:
            if self.new_calc:  # If result was displayed, reset on next input
                self.expression = ""
                self.new_calc = False
            self.expression += str(value)

        # Update Entry Display
        self.entry.delete(0, tk.END)
        self.entry.insert(0, self.expression if self.expression else "0")

# Run Application
root = tk.Tk()
CoolCalculator(root)
root.mainloop()
